import { DocumentInitParameters } from 'pdfjs-dist/types/src/display/api';
import { ForwardRefExoticComponent } from 'react';
import { RefAttributes } from 'react';
import { TypedArray } from 'pdfjs-dist/types/src/display/api';

export declare const PDFEditor: ForwardRefExoticComponent<PDFEditorProps & RefAttributes<PDFEditorRef>>;

export declare interface PDFEditorProps {
    /**
     * src - Can be a URL where a PDF file is located, a typed array (Uint8Array)
     *       already populated with data, or a parameter object.
     */
    src: string | URL | TypedArray | ArrayBuffer | DocumentInitParameters;
    /**
     * - A string containing the path and filename
     * of the worker file.
     *
     * NOTE: The `workerSrc` option should always be set, in order to prevent any
     * issues when using the PDF.js library.
     */
    workerSrc?: string;
    /**
     * This callback is triggered when the user initiates a save action.
     * If the onSave prop is not set, the save button will function similarly to the 'Save as' button in a browser's internal PDF extension.
     * The default behavior is to trigger the browser's download functionality, allowing the user to save the PDF file to their local machine.
     *
     * @param pdfBytes A Uint8Array representing the binary data of the PDF file.
     * @param formFields An object of type PDFFormFields containing information about the form fields within the PDF.
     * @returns
     */
    onSave?: (pdfBytes: Uint8Array, formFields: PDFFormFields) => void;
}

export declare interface PDFEditorRef {
    formFields: PDFFormFields;
}

export declare interface PDFFormFields {
    [x: string]: string;
}

export { }
